{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","myChangeHandler","event","setState","username","target","value","state","val","react_default","a","createElement","className","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Form","inline","Group","controlId","Control","type","onChange","placeholder","Button","Tabs","transition","defaultActiveKey","Tab","eventKey","title","Table","striped","bordered","hover","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d748701.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nimport './App.css';\nimport {Navbar, Nav, Tabs, Tab, Table, Form, Button} from 'react-bootstrap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '' };\n  }\n  myChangeHandler = (event) => {\n    \n    this.setState({username: event.target.value});\n  }\n\n\n  render() {\n    let val = '';\n    if (this.state.username <= 0) {\n      val = '';\n    } \n    else if (this.state.username <= 100) {\n      val = \"FREE\";\n    } \n    else if (this.state.username <= 500) {\n      val = 11;\n    } \n    else if (this.state.username <= 1000) {\n      val = 15;\n    } \n    else if (this.state.username <= 1500) {\n      val = 26;\n    } \n    else if (this.state.username <= 2500) {\n      val = 41;\n    } \n    else if (this.state.username <= 3500) {\n      val = 56;\n    } \n    else if (this.state.username <= 5000) {\n      val = 61;\n    } \n    else if (this.state.username <= 7500) {\n      val = 77;\n    } \n    else if (this.state.username <= 10000) {\n      val = 87;\n    } \n    else if (this.state.username <= 15000) {\n      val = 97;\n    } \n    else if (this.state.username <= 20000) {\n      val = 102;\n    }\n    else if (this.state.username <= 70000) {\n      val = 105;\n    } \n    \n    else {\n      val = '';\n    }\n    return (\n    \n    <div className=\"App\">\n  \n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Cost Calculator KE</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            \n            \n          </Nav>\n          <Nav>\n            <Nav.Link href=\"#deets\">Timer</Nav.Link>\n            \n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n     \n      <div className=\"container Justify-content-center\">\n        <div className=\"jumbotron\">\n          <h2>Welcome to the online Cost Calculator KE</h2>\n          <p>Updated last July 26 2019</p>\n          <Form inline className=\"justify-content-center\">\n          <Form.Group controlId=\"calculate\">\n            \n            <Form.Control type=\"text\" onChange={this.myChangeHandler} placeholder=\"Enter ammount \" />\n          </Form.Group>\n          <Form.Group controlId=\"calculate\">\n           <Button variant=\"dark\"> Calculate </Button>\n          </Form.Group>\n        </Form>\n\n        <Tabs className=\"justify-content-center\" transition={false} defaultActiveKey=\"mpesa\" id=\"starttabs\">\n          <Tab eventKey=\"mpesa\" title=\"M-pesa\">\n\n          <Table striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Type of Transaction</th>\n                <th>Cost in KES</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>1</td>\n                <td>Sending to Mpesa Users</td>\n                <td>{val}</td>\n               \n              </tr>\n              <tr>\n                <td>2</td>\n                <td>Sending to Other Mobile Money Users</td>\n                <td>Mark</td>\n              </tr>\n              <tr>\n                <td>3</td>\n                <td>Transfer to Unregistered Users </td>\n                <td>Mark</td>\n              </tr>\n              <tr>\n                <td>4</td>\n                <td>Mpesa Agent Withdrawal </td>\n                <td>Mark</td>\n              </tr>\n              <tr>\n                <td>5</td>\n                <td>ATM Withdrawal </td>\n                <td>Mark</td>\n              </tr>\n              \n            </tbody>\n          </Table>\n            \n          </Tab>\n          <Tab eventKey=\"kplc\" title=\"Kplc\">\n            <p>meeee</p>\n            \n          </Tab>\n          \n      </Tabs>\n        </div>\n      </div>\n\n      <div className=\"jumbotron bg-dark jumbotron-fluid\" id=\"footer\">\n        <p id=\"dis\">Disclaimer !! : We are not liable for any losses\n         that may arise for the use of this service</p>\n      \n      <p id=\"copyr\">All rights reserved | Cost Calculator KE 2019</p>\n      </div>\n      \n\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}